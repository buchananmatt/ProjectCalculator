=Project Calculator
==Overview
This program is an attempt to emulate the behavior of a standard four-function calculator in the terminal. 

This program currently accepts expressions of integers '0-9' and operators '+', '-', '*', 'x', '/', '(', ')', '^', '%'.

Expressions can be entered either at program start as a command line argument, or after startup.

The calculator uses the C++ standard string to store the user input expression, then manipulates the string characters based on character type.

The order of operations, Parentheses, Exponents, Multiplication, Division, Addition, Subtraction, is followed by the program.

This program can also compute the modulus between two operands. To observe the order of operations, a modulus operation will occur last and the result will be the remainder after the entire expression is evaluated.

==Build
Software Used:
* Visual Studio Code        https://code.visualstudio.com/
* Apple Clang 13.0.0        https://clang.llvm.org/
* GNU Make 3.81             https://www.gnu.org/software/make/
* Git 2.32.0                https://git-scm.com/
* GNU Debugger 13.2         https://www.sourceware.org/gdb/

From a terminal, navigate to the root project directory and run:

{{{
make
}}}

The program can be ran from the file explorer by running the file "calc.out", or from a terminal by running the command:

{{{
./calc.out
}}}

Best practice when entering a command line expression to solve is to enclose the expression in single quotes " ' ", such as:

{{{
./calc.out '2 * (12-5)'
}}}

==Known Issues 

===Invalid User Input. 

[FIXED! Program now checks and generates an error if operators are passed consecutively or at the beginning or end of an expression (with the exception of the '-' to allow negative numbers).]

===Negative Numbers. 

[FIXED! Program now performs arithmetic with negative numbers correctly.]

===Division Operations. 

[FIXED! Sort of. For now, the program will provide a warning to the user if the modulus of an integer division operation is greater than zero. Until floating point operations are working in this program, this will be the solution.]

===No Input Crash.

[FIXED! Program will check for an input prior to moving on. If the 'ENTER' key is pressed with no input, program will simply loop back to the beginning prompt.]

==Planned Updates

* Fix for invalid user input issue described above. DONE!
* Fix for negative numbers issue described above. DONE!
* Fix for division operations issue described above. DONE!
* Add support for parentheses. DONE!
* Add support for exponents. DONE!
* Add support for floating point numbers...WORKING

==License

COPYRIGHT [2023] [MATTHEW T. BUCHANAN] [BOCAN SOFTWARE]

Licensed under the Apache License, Version 2.0 (the "License);
You may not use these files except in compliance with the License.
You may obtain a copy of the License at

http://www.apacher.org/licenses.LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis, 
without warranties or conditions of any kind, either express or implied.
See the License for th specific language governing permissions and
limitations under the license.