=Project Calculator
==Overview
This program is an attempt to emulate the behavior of a standard four-function calculator in the terminal via Command Line Interface. 

This program currently accepts expressions of integers '0-9' and operators '+', '-', '*', 'x', '/', '(', ')', '^'.

Expressions can be entered either at program start as a command line argument, or after startup.

The calculator uses the C++ standard string to store the user input expression, then manipulates the string characters based on character type.

The order of operations, PEMDAS, is followed by the program.

*Parentheses
*Exponents (and Roots)
*Multiplication (and Division)
*Division
*Addition (and Subtraction)
*Subtraction

==Build
Software Used:
* Visual Studio Code        https://code.visualstudio.com/
* Apple Clang 13.0.0        https://clang.llvm.org/
* GNU Make 3.81             https://www.gnu.org/software/make/
* Git 2.32.0                https://git-scm.com/
* GNU Debugger 13.2         https://www.sourceware.org/gdb/

From a terminal, navigate to the root project directory and run:

{{{
make
}}}

The program can be ran from the file explorer by running the file "calc.out", or from a terminal by running the command:

{{{
./calc.out
}}}

Best practice when entering a command line expression to solve is to enclose the expression in single quotes " ' ", such as:

{{{
./calc.out '2 * (12-5)'
}}}

==Known Issues 

===Invalid User Input. 

[FIXED! Program now checks and generates an error if operators are passed consecutively or at the beginning or end of an expression (with the exception of the '-' to allow negative numbers).]

===Negative Numbers. 

[FIXED! Program now performs arithmetic with negative numbers correctly.]

===Division Operations. 

[FIXED! Sort of. For now, the program will provide a warning to the user if the modulus of an integer division operation is greater than zero. Until floating point operations are working in this program, this will be the solution.]

===No Input Crash.

[FIXED! Program will check for an input prior to moving on. If the 'ENTER' key is pressed with no input, program will simply loop back to the beginning prompt.]

==Planned Updates

* Fix for invalid user input issue described above. DONE!
* Fix for negative numbers issue described above. DONE!
* Fix for division operations issue described above. DONE!
* Add support for parentheses. DONE!
* Add support for exponents. DONE!
* Add support for floating point numbers...DONE!

==Project Goals

The goal of this project from the beginning was to simply learn and practice my programming skills in C++. 
Along the way, I decided to place more emphasis on the workflow and documentation.
As soon as I started thinking about the design in terms of user interaction, 
the design became much easier to visualize and the project started moving along.
I would guess this program is about on par with the skills of a first-year computer science student, 
which is fitting because that is all the formal education I have in computer science and C++.
This is by no means an optimized program, nor was that my intention, although I do have some ideas for future
refactors which may increase speed and decrease memory requirements.

==Program Design

The primary design of this calculator takes inspiration from a standard four-function calculator. 
The primary interactions between the user and a calculator like this are:

# User turns the calculator on.
# User inputs the expression to solve.
# Calculator solves the expression.
# Calculator displays the solution.
# User inputs another expression to solve or turns the calculator off.

These interactions inspired how the main function and the Calculator public methods are designed.

===Public Methods (User Interface)

**Input**

**Solve**

**Output**

**CheckExitFlag**

===Private Methods (Under the Hood)

**ValidateInputString**

**ResolveExpSqrLoop()**

**ResolveMulDivLoop()**

**ResolveAddSubLoop()**

**GetLeftOperand()**

**GetLeftOperand()**

**GetRightOperand()**

**GetRightOperand()**

**PerformMathOperation()**

**PerformMathOperation()**

**IsOperator()**

**IsInteger()**

**PrintError()**

===Number Handling

I began this project focused solely on integers and standard four function arithmetic, 
however a goal of mine was to make the program flexible enough to handle large numbers and 
floating point numbers if the user desired, without having to allocate large amounts of memory
or require heavy CPU overhead when not needed. I ultimately decided to use types long and double to
have a consistent data size which can accomodate relatively large numbers and numbers to many
significant digits.

|=Data Type |=Size    |=Max No. (Base 10) |=Precision         |
| short     | 2 bytes |         2^8       | 1                 |
| int       | 4 bytes |         2^32      | 1                 |
| **long**  | 8 bytes |         2^64      | 1                 |
| float     | 4 bytes |         2^32      | 0.0000001         |
| **double**| 8 bytes |         2^64      | 0.000000000000001 |

==Code Design

In general, I spent a healthy amount of time considering the syntax and conventions of various 
portions of the code and the file system. I took inspiration from the Google C++ Style Guide, but
I did deviate at various portions if there was another convention that I liked better. My goal 
was to have a clean and consistent style throughout the project.

==Performance

I am still working on my benchmarking procedures, so right now the only real metric I have is final 
size of the binary. The size of the current version of the program is 81 KB (81,576). I am certain
this can be optimized, however it isn't readily apparent to me at the time of this last commit.

==Project Timeline

* Project Start | 24 July 2023
* Initial Capability | 18 August 2023
* Parentheses and Exponent Capability | 20 August 2023
* Initial Floating Point Capability | 23 August 2023

==License

COPYRIGHT [2023] [MATTHEW T. BUCHANAN] [BOCAN SOFTWARE]

Licensed under the Apache License, Version 2.0 (the "License);
You may not use these files except in compliance with the License.
You may obtain a copy of the License at

http://www.apacher.org/licenses.LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis, 
without warranties or conditions of any kind, either express or implied.
See the License for th specific language governing permissions and
limitations under the license.